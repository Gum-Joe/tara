// Generated by CoffeeScript 2.3.0
(function() {
  // out: ../lib/menu.js, sourcemap: true
  /*
   * @overview Menu Class
   * @module tara-right-click-menu
   */
  var DB, Menu, MenuItem, TARA_CONFIG_DBS, TaraMenu, eachSeries, join, remote, tmp;

  if (typeof window === "undefined") {
    ({Menu, MenuItem, remote} = require("electron"));
  }

  ({join} = require("path"));

  ({eachSeries} = require("async"));

  ({TARA_CONFIG_DBS} = require("tara-core/lib/constants.js"));

  DB = require("nedb");

  if (typeof window !== "undefined") {
    ({remote} = require("electron"));
    ({Menu, MenuItem} = remote);
  }

  // TMP store db
  tmp = new DB({
    filename: join(TARA_CONFIG_DBS, "right-click-context-menu", "tmp.db"),
    autoload: true
  });

  tmp.insert({
    idCount: 0
  });

  /*
   * Menu class
   * @param {String} name Name of db
   * @class
   */
  TaraMenu = class TaraMenu {
    constructor(name) {
      // Menu items
      this.Item = MenuItem;
      this.menu = new Menu();
      // Create db for menus
      this.name = name;
      this.db = new DB({
        filename: join(TARA_CONFIG_DBS, "right-click-context-menu", `${this.name}.db`),
        autoload: true
      });
    }

    /*
     * Run the menu if a certain statement is met
     * @param {Function} test Function to return either true or false for whether or not to pop up
     * @returns {void} Nothing
     */
    applyIf(test) {
      return this.checkApply = test;
    }

    /*
     * Appends item to menu db
     * @param {object} item Menu item
     */
    append(item) {
      var db;
      db = this.db;
      // Check if item is already there
      return db.find({item}, function(err, docs) {
        if (err) {
          throw err;
        }
        // Look for next id
        return tmp.find({
          idCount: {
            $exists: true
          }
        }, function(err, count) {
          if (err) {
            throw err;
          }
          // Insert
          if (docs.length === 0) {
            db.insert({
              item,
              id: count[0].idCount || item.id
            });
            // Update ID count
            return tmp.update({
              idCount: /.*/
            }, {
              $set: {
                idCount: count[0].idCount++ || item.id++
              }
            }, {}, function(err) {
              if (err) {
                throw err;
              }
            });
          }
        });
      });
    }

    /*
     * Start listenning for the event
     * @returns {void} Nothing
     */
    listen() {
      var that;
      console.log("Now listenning (menu)");
      that = this;
      return window.addEventListener("contextmenu", function(event) {
        var db;
        event.preventDefault();
        // Remake menu from db
        db = new DB({
          filename: join(TARA_CONFIG_DBS, "right-click-context-menu", `${that.name}.db`),
          autoload: true
        });
        return db.find({}, function(err, docs) {
          var i, item, len, menu, template;
          if (err) {
            throw err;
          }
          template = [];
          for (i = 0, len = docs.length; i < len; i++) {
            item = docs[i];
            if (item.item.hasOwnProperty("click")) {
              // Resolve click & append to to append array (in order)
              item.item.click = require(item.item.click);
            }
            item.item.id = item.item.id;
            item.item = new MenuItem(item.item);
            template[item.item.id] = item.item;
          }
          menu = Menu.buildFromTemplate(template);
          return menu.popup(remote.getCurrentWindow());
        });
      // Add to menu add popup when done
      /*
      eachSeries(docs, (item, callback) ->
        console.log item
        menu.append(item.item)
        callback()
      , () ->
        menu.popup(remote.getCurrentWindow())
      )
      */
      }, false);
    }

  };

  module.exports = TaraMenu;

}).call(this);

//# sourceMappingURL=menu.js.map
